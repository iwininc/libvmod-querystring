# libvmod-querystring - querystring manipulation module for Varnish
#
# Copyright (C) 2012-2016, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
# All rights reserved.

$Module querystring Varnish QueryString Module

DESCRIPTION
===========

Varnish multipurpose vmod for URL query-string manipulation. Can be used to
normalize for instance request URLs or Location response headers in various
ways. It is recommended to at least clean incoming request URLs (removing empty
parameters or query-strings), all other functions do the cleaning.


$Function STRING clean(STRING)

Description
   Returns the given URL without empty parameters. The query-string is removed
   if empty (either before or after the removal of empty parameters). Note that
   a parameter with an empty value does not constitute an empty parameter, so
   a query string "?something" would not be cleaned.
Example
   .. sourcecode::

      set req.url = querystring.clean(req.url);


$Function STRING remove(STRING)

Description
   Returns the given URL with its query-string removed
Example
   .. sourcecode::

      set req.url = querystring.remove(req.url);


$Function STRING sort(STRING)

Description
   Returns the given URL with its query-string sorted
Example
   .. sourcecode::

      set req.url = querystring.sort(req.url);


$Function STRING filtersep()

Description
   Returns the separator needed by the filter_ and filter_except functions


$Function STRING filter_(STRING, STRING_LIST)

Description
   Returns the given URL without the listed parameters
Example
   .. sourcecode::

      set req.url = querystring.filter_(req.url,
        "utm_source" + querystring.filtersep() +
        "utm_medium" + querystring.filtersep() +
        "utm_campaign");


$Function STRING filter_except(STRING, STRING_LIST)

Description
   Returns the given URL but only keeps the listed parameters
Example
   .. sourcecode::

      set req.url = querystring.filter_(req.url,
                                       "q" + querystring.filtersep() + "p");

$Function STRING regfilter(STRING, STRING)

Description
   Returns the given URL without the parameters matching a regular expression
Example
   .. sourcecode::

      set req.url = querystring.regfilter(req.url, "utm_.*");


$Function STRING regfilter_except(STRING, STRING)

Description
   Returns the given URL but only keeps the parameters matching a regular
   expression
Example
   .. sourcecode::

      set req.url = querystring.regfilter_except(req.url, "^(q|p)$");

$Function STRING globfilter(STRING, STRING)

Description
   Returns the given URL without the parameters matching a glob
Example
   ::

      set req.url = querystring.globfilter(req.url, "utm_*");


$Function STRING globfilter_except(STRING, STRING)

Description
   Returns the given URL but only keeps the parameters matching a glob
Example
   ::

      set req.url = querystring.globfilter_except(req.url, "sess*");


EXAMPLES
========

In your VCL you could then use this vmod along the following lines::

   import querystring;

   sub vcl_hash {
      # sort the URL before the request hashing
      set req.url = querystring.sort(req.url);
   }

You can use regfilter to specify a list of arguments that must not be removed
(everything else will be) with a negative look-ahead expression::

   set req.url = querystring.regfilter(req.url, "^(?!param1|param2)");


$Object filter(BOOL sort = 0)
$Method VOID .add_name(STRING)
$Method VOID .add_glob(STRING)
$Method VOID .add_regex(STRING)
$Method STRING .apply(STRING, ENUM {keep, drop} mode = "drop")
$Method STRING .extract(STRING, ENUM {keep, drop} mode = "drop")


SEE ALSO
========

``vcl``\(7),
``varnishd``\(1),
``glob``\(7)
